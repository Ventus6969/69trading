// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LonesomeTheBlue
// Modified to add EMA lines and ATR alerts
// Further modified for dual confirmation signals
// Added negative regular divergence conditions

//@version=4
study("69確認法", overlay = true, max_bars_back = 1000, max_lines_count = 400, max_labels_count = 400)

// 原始參數
prd = input(defval = 5, title = "Pivot Period", minval = 1, maxval = 50)
source = input(defval = "Close", title = "Source for Pivot Points", options = ["Close", "High/Low"])
searchdiv = input(defval = "Regular", title = "Divergence Type", options = ["Regular", "Hidden", "Regular/Hidden"])
showindis = input(defval = "Full", title = "Show Indicator Names", options = ["Full", "First Letter", "Don't Show"])
showlimit = input(1, title="Minimum Number of Divergence", minval = 1, maxval = 11)
maxpp = input(defval = 10, title = "Maximum Pivot Points to Check", minval = 1, maxval = 20)
maxbars = input(defval = 100, title = "Maximum Bars to Check", minval = 30, maxval = 200)
shownum = input(defval = true, title = "Show Divergence Number")
showlast = input(defval = false, title = "Show Only Last Divergence")
dontconfirm = input(defval = false, title = "Don't Wait for Confirmation")
showlines = input(defval = true, title = "Show Divergence Lines")
showpivot = input(defval = false, title = "Show Pivot Points")

// 指標開關
calcmacd = input(defval = false, title = "MACD")
calcmacda = input(defval = true, title = "MACD Histogram")
calcrsi = input(defval = false, title = "RSI")
calcstoc = input(defval = false, title = "Stochastic")
calccci = input(defval = false, title = "CCI")
calcmom = input(defval = false, title = "Momentum")
calcobv = input(defval = false, title = "OBV")
calcvwmacd = input(false, title = "VWmacd")
calccmf = input(false, title = "Chaikin Money Flow")
calcmfi = input(false, title = "Money Flow Index")
calcext = input(false, title = "Check External Indicator")
externalindi = input(defval = close, title = "External Indicator")

// ATR參數
atr_period = input(defval = 5, title = "ATR周期", minval = 1)

// 新增雙重確認參數
signal_delay = input(defval = 2, title = "背離信號延遲(K線數)", minval = 1, maxval = 10, tooltip = "檢查幾根K線前的背離信號，2=前前根K線(30分鐘前)")
prev_candle_delay = input(defval = 1, title = "前根K線延遲", minval = 1, maxval = 5, tooltip = "檢查前根K線收盤狀態，1=前根K線(15分鐘前)")
require_current_close_confirm = input(defval = true, title = "需要當前K線收盤確認", tooltip = "看漲信號需當前K線收漲，看跌信號需當前K線收跌")

// 顏色參數
pos_reg_div_col = input(defval = color.yellow, title = "Positive Regular Divergence")
neg_reg_div_col = input(defval = color.silver, title = "Negative Regular Divergence")
pos_hid_div_col = input(defval = color.lime, title = "Positive Hidden Divergence")
neg_hid_div_col = input(defval = color.red, title = "Negative Hidden Divergence")
pos_div_text_col = input(defval = color.black, title = "Positive Divergence Text Color")
neg_div_text_col = input(defval = color.white, title = "Negative Divergence Text Color")
reg_div_l_style_ = input(defval = "Solid", title = "Regular Divergence Line Style", options = ["Solid", "Dashed", "Dotted"])
hid_div_l_style_ = input(defval = "Dashed", title = "Hdden Divergence Line Style", options = ["Solid", "Dashed", "Dotted"])
reg_div_l_width = input(defval = 2, title = "Regular Divergence Line Width", minval = 1, maxval = 5)
hid_div_l_width = input(defval = 1, title = "Hidden Divergence Line Width", minval = 1, maxval = 5)

// MA和EMA參數
showmas = input(defval = false, title = "Show MAs 50 & 200", inline = "ma12")
cma1col = input(defval = color.lime, title = "", inline = "ma12")
cma2col = input(defval = color.red, title = "", inline = "ma12")
showEMAs = input(defval = true, title = "Show EMAs 20, 60, 120", inline = "ema1")
ema20col = input(defval = color.red, title = "EMA20", inline = "ema1")
ema60col = input(defval = color.orange, title = "EMA60", inline = "ema1")
ema120col = input(defval = color.blue, title = "EMA120", inline = "ema1")

// 計算當前K線的漲跌狀態
current_bullish_close = close > open  // 當前K線收漲
current_bearish_close = close < open  // 當前K線收跌

// 計算前根K線(15分鐘前)的漲跌狀態
prev_candle_bullish = close[prev_candle_delay] > open[prev_candle_delay]  // 前根K線收漲
prev_candle_bearish = close[prev_candle_delay] < open[prev_candle_delay]  // 前根K線收跌

// 計算ATR
atr_value = atr(atr_period)
plot(atr_value, color = color.gray, title = "ATR", linewidth = 1, style = plot.style_line, display = display.none)

// 計算前根K線數據
prev_close_value = close[1]
prev_open_value = open[1]

// 使用plot輸出歷史數據（設為不顯示）
plot(prev_close_value, title="PREV_CLOSE", display=display.none)
plot(prev_open_value, title="PREV_OPEN", display=display.none)

// 繪製EMA線
ema20 = ema(close, 20)
ema60 = ema(close, 60)
ema120 = ema(close, 120)

plot(showEMAs ? ema20 : na, color = showEMAs ? ema20col : na, title = "EMA 20", linewidth = 2)
plot(showEMAs ? ema60 : na, color = showEMAs ? ema60col : na, title = "EMA 60", linewidth = 2)
plot(showEMAs ? ema120 : na, color = showEMAs ? ema120col : na, title = "EMA 120", linewidth = 2)

plot(showmas ? sma(close, 50) : na, color = showmas ? cma1col : na)
plot(showmas ? sma(close, 200) : na, color = showmas ? cma2col: na)

// set line styles
var reg_div_l_style = reg_div_l_style_ == "Solid" ? line.style_solid :
reg_div_l_style_ == "Dashed" ? line.style_dashed :
line.style_dotted
var hid_div_l_style = hid_div_l_style_ == "Solid" ? line.style_solid :
hid_div_l_style_ == "Dashed" ? line.style_dashed :
line.style_dotted

// get indicators
rsi = rsi(close, 2) // RSI
[macd, signal, deltamacd] = macd(close, 6, 13, 9) // MACD
moment = mom(close, 10) // Momentum
cci = cci(close, 10) // CCI
Obv = obv // OBV
stk = sma(stoch(close, high, low, 14), 3) // Stoch
maFast = vwma(close, 12), maSlow = vwma(close, 26), vwmacd = maFast - maSlow // volume weighted macd
Cmfm = ((close-low) - (high-close)) / (high - low), Cmfv = Cmfm * volume, cmf = sma(Cmfv, 21) / sma(volume,21) // Chaikin money flow
Mfi = mfi(close, 14) // Moneyt Flow Index

// keep indicators names and colors in arrays
var indicators_name = array.new_string(11)
var div_colors = array.new_color(4)
if barstate.isfirst
// names
array.set(indicators_name, 0, showindis == "Full" ? "MACD" : "M")
array.set(indicators_name, 1, showindis == "Full" ? "Hist" : "H")
array.set(indicators_name, 2, showindis == "Full" ? "RSI" : "E")
array.set(indicators_name, 3, showindis == "Full" ? "Stoch" : "S")
array.set(indicators_name, 4, showindis == "Full" ? "CCI" : "C")
array.set(indicators_name, 5, showindis == "Full" ? "MOM" : "M")
array.set(indicators_name, 6, showindis == "Full" ? "OBV" : "O")
array.set(indicators_name, 7, showindis == "Full" ? "VWMACD" : "V")
array.set(indicators_name, 8, showindis == "Full" ? "CMF" : "C")
array.set(indicators_name, 9, showindis == "Full" ? "MFI" : "M")
array.set(indicators_name,10, showindis == "Full" ? "Extrn" : "X")
//colors
array.set(div_colors, 0, pos_reg_div_col)
array.set(div_colors, 1, neg_reg_div_col)
array.set(div_colors, 2, pos_hid_div_col)
array.set(div_colors, 3, neg_hid_div_col)

// Check if we get new Pivot High Or Pivot Low
float ph = pivothigh((source == "Close" ? close : high), prd, prd)
float pl = pivotlow((source == "Close" ? close : low), prd, prd)
plotshape(ph and showpivot, text = "H",  style = shape.labeldown, color = color.new(color.white, 100), textcolor = color.red, location = location.abovebar, offset = -prd)
plotshape(pl and showpivot, text = "L",  style = shape.labelup, color = color.new(color.white, 100), textcolor = color.lime, location = location.belowbar, offset = -prd)

// keep values and positions of Pivot Highs/Lows in the arrays
var int maxarraysize = 20
var ph_positions = array.new_int(maxarraysize, 0)
var pl_positions = array.new_int(maxarraysize, 0)
var ph_vals = array.new_float(maxarraysize, 0.)
var pl_vals = array.new_float(maxarraysize, 0.)

// add PHs to the array
if ph
array.unshift(ph_positions, bar_index)
array.unshift(ph_vals, ph)
if array.size(ph_positions) > maxarraysize
array.pop(ph_positions)
array.pop(ph_vals)

// add PLs to the array
if pl
array.unshift(pl_positions, bar_index)
array.unshift(pl_vals, pl)
if array.size(pl_positions) > maxarraysize
array.pop(pl_positions)
array.pop(pl_vals)

// functions to check Regular Divergences and Hidden Divergences

// function to check positive regular or negative hidden divergence
// cond == 1 => positive_regular, cond == 2=> negative_hidden
positive_regular_positive_hidden_divergence(src, cond)=>
divlen = 0
prsc = source == "Close" ? close : low
// if indicators higher than last value and close price is higher than las close
if dontconfirm or src > src[1] or close > close[1]
startpoint = dontconfirm ? 0 : 1 // don't check last candle
// we search last 15 PPs
for x = 0 to maxpp - 1
len = bar_index - array.get(pl_positions, x) + prd
// if we reach non valued array element or arrived 101. or previous bars then we don't search more
if array.get(pl_positions, x) == 0 or len > maxbars
break
if len > 5 and
((cond == 1 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(pl_vals, x))) or
(cond == 2 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(pl_vals, x))))
slope1 = (src[startpoint] - src[len]) / (len - startpoint)
virtual_line1 = src[startpoint] - slope1
slope2 = (close[startpoint] - close[len]) / (len - startpoint)
virtual_line2 = close[startpoint] - slope2
arrived = true
for y = 1 + startpoint to len - 1
if src[y] < virtual_line1 or nz(close[y]) < virtual_line2
arrived := false
break
virtual_line1 := virtual_line1 - slope1
virtual_line2 := virtual_line2 - slope2

```
            if arrived
                divlen := len
                break
divlen

```

// function to check negative regular or positive hidden divergence
// cond == 1 => negative_regular, cond == 2=> positive_hidden
negative_regular_negative_hidden_divergence(src, cond)=>
divlen = 0
prsc = source == "Close" ? close : high
// if indicators higher than last value and close price is higher than las close
if dontconfirm or src < src[1] or close < close[1]
startpoint = dontconfirm ? 0 : 1 // don't check last candle
// we search last 15 PPs
for x = 0 to maxpp - 1
len = bar_index - array.get(ph_positions, x) + prd
// if we reach non valued array element or arrived 101. or previous bars then we don't search more
if array.get(ph_positions, x) == 0 or len > maxbars
break
if len > 5 and
((cond == 1 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(ph_vals, x))) or
(cond == 2 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(ph_vals, x))))
slope1 = (src[startpoint] - src[len]) / (len - startpoint)
virtual_line1 = src[startpoint] - slope1
slope2 = (close[startpoint] - nz(close[len])) / (len - startpoint)
virtual_line2 = close[startpoint] - slope2
arrived = true
for y = 1 + startpoint to len - 1
if src[y] > virtual_line1 or nz(close[y]) > virtual_line2
arrived := false
break
virtual_line1 := virtual_line1 - slope1
virtual_line2 := virtual_line2 - slope2

```
            if arrived
                divlen := len
                break
divlen

```

// calculate 4 types of divergence if enabled in the options and return divergences in an array
calculate_divs(cond, indicator)=>
divs = array.new_int(4, 0)
array.set(divs, 0, cond and (searchdiv == "Regular" or searchdiv == "Regular/Hidden") ? positive_regular_positive_hidden_divergence(indicator, 1) : 0)
array.set(divs, 1, cond and (searchdiv == "Regular" or searchdiv == "Regular/Hidden") ? negative_regular_negative_hidden_divergence(indicator, 1) : 0)
array.set(divs, 2, cond and (searchdiv == "Hidden" or searchdiv == "Regular/Hidden")  ? positive_regular_positive_hidden_divergence(indicator, 2) : 0)
array.set(divs, 3, cond and (searchdiv == "Hidden" or searchdiv == "Regular/Hidden")  ? negative_regular_negative_hidden_divergence(indicator, 2) : 0)
divs

// array to keep all divergences
var all_divergences = array.new_int(44) // 11 indicators * 4 divergence = 44 elements
// set related array elements
array_set_divs(div_pointer, index)=>
for x = 0 to 3
array.set(all_divergences, index * 4 + x, array.get(div_pointer, x))

// set divergences array
array_set_divs(calculate_divs(calcmacd, macd), 0)
array_set_divs(calculate_divs(calcmacda, deltamacd), 1)
array_set_divs(calculate_divs(calcrsi, rsi), 2)
array_set_divs(calculate_divs(calcstoc, stk), 3)
array_set_divs(calculate_divs(calccci, cci), 4)
array_set_divs(calculate_divs(calcmom, moment), 5)
array_set_divs(calculate_divs(calcobv, Obv), 6)
array_set_divs(calculate_divs(calcvwmacd, vwmacd), 7)
array_set_divs(calculate_divs(calccmf, cmf), 8)
array_set_divs(calculate_divs(calcmfi, Mfi), 9)
array_set_divs(calculate_divs(calcext, externalindi), 10)

// check minimum number of divergence, if less than showlimit then delete all divergence
total_div = 0
for x = 0 to array.size(all_divergences) - 1
total_div := total_div + round(sign(array.get(all_divergences, x)))

if total_div < showlimit
array.fill(all_divergences, 0)

// keep line in an array
var pos_div_lines = array.new_line(0)
var neg_div_lines = array.new_line(0)
var pos_div_labels = array.new_label(0)
var neg_div_labels = array.new_label(0)

// remove old lines and labels if showlast option is enabled
delete_old_pos_div_lines()=>
if array.size(pos_div_lines) > 0

for j = 0 to array.size(pos_div_lines) - 1
line.delete(array.get(pos_div_lines, j))
array.clear(pos_div_lines)

delete_old_neg_div_lines()=>
if array.size(neg_div_lines) > 0

for j = 0 to array.size(neg_div_lines) - 1
line.delete(array.get(neg_div_lines, j))
array.clear(neg_div_lines)

delete_old_pos_div_labels()=>
if array.size(pos_div_labels) > 0
for j = 0 to array.size(pos_div_labels) - 1
label.delete(array.get(pos_div_labels, j))
array.clear(pos_div_labels)

delete_old_neg_div_labels()=>
if array.size(neg_div_labels) > 0

for j = 0 to array.size(neg_div_labels) - 1
label.delete(array.get(neg_div_labels, j))
array.clear(neg_div_labels)

// delete last creted lines and labels until we met new PH/PV
delete_last_pos_div_lines_label(n)=>
if n > 0 and array.size(pos_div_lines) >= n

asz = array.size(pos_div_lines)
for j = 1 to n
line.delete(array.get(pos_div_lines, asz - j))
array.pop(pos_div_lines)
if array.size(pos_div_labels) > 0

label.delete(array.get(pos_div_labels, array.size(pos_div_labels) - 1))
array.pop(pos_div_labels)

delete_last_neg_div_lines_label(n)=>
if n > 0 and array.size(neg_div_lines) >= n

asz = array.size(neg_div_lines)
for j = 1 to n
line.delete(array.get(neg_div_lines, asz - j))
array.pop(neg_div_lines)
if array.size(neg_div_labels) > 0

label.delete(array.get(neg_div_labels, array.size(neg_div_labels) - 1))
array.pop(neg_div_labels)

// variables for Alerts
pos_reg_div_detected = false
neg_reg_div_detected = false
pos_hid_div_detected = false
neg_hid_div_detected = false

// to remove lines/labels until we met new // PH/PL
var last_pos_div_lines = 0
var last_neg_div_lines = 0
var remove_last_pos_divs = false
var remove_last_neg_divs = false
if pl
remove_last_pos_divs := false
last_pos_div_lines := 0
if ph
remove_last_neg_divs := false
last_neg_div_lines := 0

// draw divergences lines and labels
divergence_text_top = ""
divergence_text_bottom = ""
distances = array.new_int(0)
dnumdiv_top = 0
dnumdiv_bottom = 0
top_label_col = color.white
bottom_label_col = color.white
old_pos_divs_can_be_removed = true
old_neg_divs_can_be_removed = true
startpoint = dontconfirm ? 0 : 1 // used for don't confirm option

for x = 0 to 10
div_type = -1
for y = 0 to 3
if array.get(all_divergences, x * 4 + y) > 0 // any divergence?
div_type := y
if (y % 2) == 1
dnumdiv_top := dnumdiv_top + 1
top_label_col := array.get(div_colors, y)
if (y % 2) == 0
dnumdiv_bottom := dnumdiv_bottom + 1
bottom_label_col := array.get(div_colors, y)
if not array.includes(distances, array.get(all_divergences, x * 4 + y))  // line not exist ?
array.push(distances, array.get(all_divergences, x * 4 + y))
new_line = showlines ? line.new(x1 = bar_index - array.get(all_divergences, x * 4 + y),
y1 = (source == "Close" ? close[array.get(all_divergences, x * 4 + y)] :
(y % 2) == 0 ? low[array.get(all_divergences, x * 4 + y)] :
high[array.get(all_divergences, x * 4 + y)]),
x2 = bar_index - startpoint,
y2 = (source == "Close" ? close[startpoint] :
(y % 2) == 0 ? low[startpoint] :
high[startpoint]),
color = array.get(div_colors, y),
style = y < 2 ? reg_div_l_style : hid_div_l_style,
width = y < 2 ? reg_div_l_width : hid_div_l_width
)
: na
if (y % 2) == 0
if old_pos_divs_can_be_removed
old_pos_divs_can_be_removed := false
if not showlast and remove_last_pos_divs
delete_last_pos_div_lines_label(last_pos_div_lines)
last_pos_div_lines := 0
if showlast
delete_old_pos_div_lines()
array.push(pos_div_lines, new_line)
last_pos_div_lines := last_pos_div_lines + 1
remove_last_pos_divs := true

```
            if (y % 2) == 1
                if old_neg_divs_can_be_removed
                    old_neg_divs_can_be_removed := false
                    if not showlast and remove_last_neg_divs
                        delete_last_neg_div_lines_label(last_neg_div_lines)
                        last_neg_div_lines := 0
                    if showlast
                        delete_old_neg_div_lines()
                array.push(neg_div_lines, new_line)
                last_neg_div_lines := last_neg_div_lines + 1
                remove_last_neg_divs := true

        // set variables for alerts
        if y == 0
            pos_reg_div_detected := true
        if y == 1
            neg_reg_div_detected := true
        if y == 2
            pos_hid_div_detected := true
        if y == 3
            neg_hid_div_detected := true
// get text for labels
if div_type >= 0
    divergence_text_top    := divergence_text_top    + ((div_type % 2) == 1 ? (showindis != "Don't Show" ? array.get(indicators_name, x) + "\\n" : "") : "")
    divergence_text_bottom := divergence_text_bottom + ((div_type % 2) == 0 ? (showindis != "Don't Show" ? array.get(indicators_name, x) + "\\n" : "") : "")

```

// draw labels
if showindis != "Don't Show" or shownum
if shownum and dnumdiv_top > 0
divergence_text_top := divergence_text_top + tostring(dnumdiv_top)
if shownum and dnumdiv_bottom > 0
divergence_text_bottom := divergence_text_bottom + tostring(dnumdiv_bottom)
if divergence_text_top != ""
if showlast
delete_old_neg_div_labels()
array.push(neg_div_labels,
label.new( x = bar_index,
y = max(high, high[1]),
text = divergence_text_top,
color = top_label_col,
textcolor = neg_div_text_col,
style = label.style_label_down
))

```
if divergence_text_bottom != ""
    if showlast
        delete_old_pos_div_labels()
    array.push(pos_div_labels,
                  label.new( x = bar_index,
                             y = min(low, low[1]),
                             text = divergence_text_bottom,
                             color = bottom_label_col,
                             textcolor = pos_div_text_col,
                             style = label.style_label_up
                             ))

```

// 歷史背離信號儲存陣列
var pos_reg_div_history = array.new_bool(20, false)
var neg_reg_div_history = array.new_bool(20, false)
var pos_hid_div_history = array.new_bool(20, false)
var neg_hid_div_history = array.new_bool(20, false)

// 儲存當前背離信號到歷史陣列
if barstate.isconfirmed
array.unshift(pos_reg_div_history, pos_reg_div_detected)
if array.size(pos_reg_div_history) > 20
array.pop(pos_reg_div_history)

```
array.unshift(neg_reg_div_history, neg_reg_div_detected)
if array.size(neg_reg_div_history) > 20
    array.pop(neg_reg_div_history)

array.unshift(pos_hid_div_history, pos_hid_div_detected)
if array.size(pos_hid_div_history) > 20
    array.pop(pos_hid_div_history)

array.unshift(neg_hid_div_history, neg_hid_div_detected)
if array.size(neg_hid_div_history) > 20
    array.pop(neg_hid_div_history)

```

// 檢查歷史背離信號
historical_pos_reg_div = array.size(pos_reg_div_history) > signal_delay ? array.get(pos_reg_div_history, signal_delay) : false
historical_neg_reg_div = array.size(neg_reg_div_history) > signal_delay ? array.get(neg_reg_div_history, signal_delay) : false
historical_pos_hid_div = array.size(pos_hid_div_history) > signal_delay ? array.get(pos_hid_div_history, signal_delay) : false
historical_neg_hid_div = array.size(neg_hid_div_history) > signal_delay ? array.get(neg_hid_div_history, signal_delay) : false

// 歷史數據技術指標計算
ema20_delayed = ema20[signal_delay]
ema60_delayed = ema60[signal_delay]
ema120_delayed = ema120[signal_delay]
atr_value_delayed = atr_value[signal_delay]
deltamacd_delayed = deltamacd[signal_delay]
rsi_delayed = rsi[signal_delay]

// 新增：計算前前根和前根的MACD柱狀值
deltamacd_prev_prev = deltamacd[signal_delay]  // 前前根MACD柱狀值
deltamacd_prev = deltamacd[prev_candle_delay]  // 前根MACD柱狀值

// 計算前前根K線收盤價和開盤價用於比較
prev_prev_close = close[signal_delay]
prev_prev_open = open[signal_delay]  // 前前根K線開盤價
prev_candle_close = close[prev_candle_delay]  // 前根K線收盤價
prev_candle_open = open[prev_candle_delay]    // 前根K線開盤價

// === POSITIVE REGULAR DIVERGENCE 條件 ===
// A欄基礎條件: positive regular divergence + EMA20 < EMA120 + EMA60 < EMA120 + MACD柱狀圖 < 0 + 新增條件
// 新增條件: (EMA120-EMA60)*0.75 > ATR
pos_base_condition = historical_pos_reg_div and ema20_delayed < ema120_delayed and ema60_delayed < ema120_delayed and ema20_delayed < ema60_delayed and (ema60 - ema20) > atr_value

// 看多條件組合 (加入MACD柱狀值歷史條件：前前根和前根都要<0)
long_condition_1 = pos_base_condition and prev_candle_bullish and current_bearish_close and close < ema20 and deltamacd_prev_prev < 0 and deltamacd_prev < 0 and (ema120 - ema60) > atr_value * 0.83 // 第3行
long_condition_2 = pos_base_condition and prev_candle_bullish and current_bullish_close and close > ema20 and deltamacd_prev_prev > 0 and deltamacd_prev > 0 and (ema120 - ema60) > atr_value * 0.83 // 第4行
long_condition_3 = pos_base_condition and prev_candle_bullish and current_bullish_close and close < ema20 and deltamacd_prev_prev < 0 and deltamacd_prev < 0 and (ema120 - ema60) > atr_value * 0.83 // 第5行
long_condition_4 = pos_base_condition and prev_candle_bearish and current_bullish_close and close < ema20 and deltamacd_prev_prev < 0 and deltamacd_prev < 0 and (ema120 - ema60) > atr_value * 0.83 // 第9行

// 看空條件 (對應表格第7行) - 修正為當下收盤價 > 前前根開盤價
short_condition_1 = pos_base_condition and prev_candle_bearish and current_bearish_close and close > prev_prev_open and deltamacd_prev_prev < 0 and deltamacd_prev < 0 and (ema120 - ema60) < atr_value

// === NEGATIVE REGULAR DIVERGENCE 條件 ===
// A欄基礎條件: negative regular divergence + EMA20 > EMA120 + EMA60 > EMA120 + MACD柱狀圖 > 0 + 新增條件
// 新增條件: (EMA60-EMA120)*0.75 > ATR
neg_base_condition = historical_neg_reg_div and ema20_delayed > ema120_delayed and ema60_delayed > ema120_delayed and ema20_delayed > ema60_delayed and (ema20 - ema60) > atr_value

short_condition_2 = neg_base_condition and prev_candle_bearish and current_bullish_close and close > ema20 and deltamacd_prev_prev > 0 and deltamacd_prev > 0 and (ema60 - ema120) > atr_value * 0.83 // 第20行
short_condition_3 = neg_base_condition and prev_candle_bearish and current_bearish_close and close < ema20 and deltamacd_prev_prev < 0 and deltamacd_prev < 0 and (ema60 - ema120) > atr_value * 0.83 // 第21行
short_condition_4 = neg_base_condition and prev_candle_bearish and current_bearish_close and close > ema20 and deltamacd_prev_prev > 0 and deltamacd_prev > 0 and (ema60 - ema120) > atr_value * 0.83 // 第22行
short_condition_5 = neg_base_condition and prev_candle_bullish and current_bearish_close and close > ema20 and deltamacd_prev_prev > 0 and deltamacd_prev > 0 and (ema60 - ema120) > atr_value * 0.83 // 第26行

// 看多條件 (加入MACD柱狀值歷史條件：前前根和前根都要>0)
long_condition_5 = neg_base_condition and prev_candle_bullish and current_bullish_close and close < prev_prev_open and deltamacd_prev_prev > 0 and deltamacd_prev > 0 and (ema60 - ema120) < atr_value // 第24行

// 原始警報條件
alertcondition(pos_reg_div_detected, title='Positive Regular Divergence Detected', message='Positive Regular Divergence Detected')
alertcondition(neg_reg_div_detected, title='Negative Regular Divergence Detected', message='Negative Regular Divergence Detected')
alertcondition(pos_hid_div_detected, title='Positive Hidden Divergence Detected', message='Positive Hidden Divergence Detected')
alertcondition(neg_hid_div_detected, title='Negative Hidden Divergence Detected', message='Negative Hidden Divergence Detected')

alertcondition(pos_reg_div_detected or pos_hid_div_detected, title='Positive Divergence Detected', message='Positive Divergence Detected')
alertcondition(neg_reg_div_detected or neg_hid_div_detected, title='Negative Divergence Detected', message='Negative Divergence Detected')

// === POSITIVE REGULAR DIVERGENCE 警報條件 ===

// 條件2: 前漲當漲+高於EMA20 - 當下收盤價進場
alertcondition(long_condition_2,
title='看多條件2_突破買進',
message='{"symbol":"{{ticker}}","strategy":"long_condition_2","type":"breakout_long","entry_price":"{{close}}","prev_candle":"bullish","current_candle":"bullish","price_vs_ema20":"above","time":"{{time}}","message":"前漲當漲高於EMA20"}')

// 條件3: 前漲當漲+低於EMA20 - 前根開盤價進場
alertcondition(long_condition_3,
title='看多條件3_整理買進',
message='{"symbol":"{{ticker}}","strategy":"long_condition_3","type":"consolidation_long","entry_price":"prev_close","current_price":"{{close}}","prev_candle":"bullish","current_candle":"bullish","price_vs_ema20":"below","time":"{{time}}","message":"前漲當漲低於EMA20用前根收盤價"}')

// 條件4: 前跌當漲+低於EMA20 - 前根收盤價進場

alertcondition(long_condition_4,
title='看多條件4_反轉買進',
message='{"symbol":"{{ticker}}","strategy":"long_condition_4","type":"reversal_long","entry_price":"prev_open","current_price":"{{close}}","prev_candle":"bearish","current_candle":"bullish","price_vs_ema20":"below","time":"{{time}}","message":"前跌當漲低於EMA20用前根開盤價"}')

// 看空條件: 前跌當跌+當前>前前根開盤 - 當下收盤價進場
alertcondition(short_condition_1,
title='看空條件1_趨勢做空',
message='{"symbol":"{{ticker}}","strategy":"short_condition_1","type":"trend_short","entry_price":"{{close}}","prev_candle":"bearish","current_candle":"bearish","current_vs_prev_prev":"above_open","time":"{{time}}","message":"前跌當跌且當前高於前前根開盤"}')

// === NEGATIVE REGULAR DIVERGENCE 警報條件 ===

// 看空條件2: 前跌當漲+高於等於EMA20 - 當下收盤價進場
alertcondition(short_condition_2,
title='看空條件2_反彈做空',
message='{"symbol":"{{ticker}}","strategy":"short_condition_2","type":"bounce_short","entry_price":"{{close}}","prev_candle":"bearish","current_candle":"bullish","price_vs_ema20":"above_equal","time":"{{time}}","message":"負背離前跌當漲高於等於EMA20"}')

// 看空條件3: 前跌當跌+低於EMA20 - 當下收盤價進場
alertcondition(short_condition_3,
title='看空條件3_破底做空',
message='{"symbol":"{{ticker}}","strategy":"short_condition_3","type":"breakdown_short","entry_price":"{{close}}","prev_candle":"bearish","current_candle":"bearish","price_vs_ema20":"below","time":"{{time}}","message":"負背離前跌當跌低於EMA20"}')

// 看空條件4: 前跌當跌+高於等於EMA20 - 前根開盤價進場
alertcondition(short_condition_4,
title='看空條件4_高位做空',
message='{"symbol":"{{ticker}}","strategy":"short_condition_4","type":"high_position_short","entry_price":"prev_close","current_price":"{{close}}","prev_candle":"bearish","current_candle":"bearish","price_vs_ema20":"above_equal","time":"{{time}}","message":"負背離前跌當跌高於等於EMA20用前根收盤價"}')

// 看空條件5: 前漲當跌+高於等於EMA20 - 前根收盤價進場
alertcondition(short_condition_5,
title='看空條件5_轉勢做空',
message='{"symbol":"{{ticker}}","strategy":"short_condition_5","type":"reversal_short","entry_price":"prev_open","current_price":"{{close}}","prev_candle":"bullish","current_candle":"bearish","price_vs_ema20":"above_equal","time":"{{time}}","message":"負背離前漲當跌高於等於EMA20用前根開盤價"}')

// 看多條件5: 前漲當漲+低於EMA20 - 當下收盤價進場
alertcondition(long_condition_5,
title='看多條件5_反彈買進',
message='{"symbol":"{{ticker}}","strategy":"long_condition_5","type":"negative_div_bounce","entry_price":"{{close}}","prev_candle":"bullish","current_candle":"bullish","price_vs_ema20":"below","time":"{{time}}","message":"負背離前漲當漲低於EMA20"}')

// === 視覺化信號 ===

// POSITIVE REGULAR DIVERGENCE 信號
plotshape(long_condition_1, title="條件1-回調買進", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.normal, text="L1")
plotshape(long_condition_2, title="條件2-突破買進", style=shape.triangleup, location=location.belowbar, color=color.lime, size=size.normal, text="L2")

plotshape(long_condition_3, title="條件3-整理買進", style=shape.triangleup, location=location.belowbar, color=color.blue, size=size.normal, text="L3")
plotshape(long_condition_4, title="條件4-反轉買進", style=shape.triangleup, location=location.belowbar, color=color.aqua, size=size.normal, text="L4")
plotshape(short_condition_1, title="條件1-趨勢做空", style=shape.triangledown, location=location.abovebar, color=color.orange, size=size.normal, text="S1")

// NEGATIVE REGULAR DIVERGENCE 信號
plotshape(short_condition_2, title="條件2-反彈做空", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.normal, text="S2")
plotshape(short_condition_3, title="條件3-破底做空", style=shape.triangledown, location=location.abovebar, color=color.maroon, size=size.normal, text="S3")
plotshape(short_condition_4, title="條件4-高位做空", style=shape.triangledown, location=location.abovebar, color=color.purple, size=size.normal, text="S4")
plotshape(short_condition_5, title="條件5-轉勢做空", style=shape.triangledown, location=location.abovebar, color=color.fuchsia, size=size.normal, text="S5")
plotshape(long_condition_5, title="條件5-反彈買進", style=shape.triangleup, location=location.belowbar, color=color.yellow, size=size.normal, text="L5")

// === 詳細標籤 ===

// POSITIVE REGULAR DIVERGENCE 標籤

if long_condition_2
label.new(x = bar_index, y = low,
text = "條件2-突破買進\n開倉價: " + tostring(close) + "\n前漲→當漲\n價格>EMA20\n正背離",
color = color.lime, textcolor = color.black, style = label.style_label_up, size = size.small)

if long_condition_3
label.new(x = bar_index, y = low,
text = "條件3-整理買進\n開倉價: " + tostring(prev_candle_close) + "\n前漲→當漲\n價格<EMA20\n正背離",
color = color.blue, textcolor = color.white, style = label.style_label_up, size = size.small)

if long_condition_4
label.new(x = bar_index, y = low,
text = "條件4-反轉買進\n開倉價: " + tostring(prev_candle_open) + "\n前跌→當漲\n價格<EMA20\n正背離",
color = color.aqua, textcolor = color.black, style = label.style_label_up, size = size.small)

if short_condition_1
label.new(x = bar_index, y = high,
text = "看空1-趨勢做空\n開倉價: " + tostring(close) + "\n前跌→當跌\n當前>前前根開盤\n正背離",
color = color.orange, textcolor = color.white, style = label.style_label_down, size = size.small)

// NEGATIVE REGULAR DIVERGENCE 標籤

if short_condition_3
label.new(x = bar_index, y = high,
text = "看空3-破底做空\n開倉價: " + tostring(close) + "\n前跌→當跌\n價格<EMA20\n負背離",
color = color.maroon, textcolor = color.white, style = label.style_label_down, size = size.small)

if short_condition_4
label.new(x = bar_index, y = high,
text = "看空4-高位做空\n開倉價: " + tostring(prev_candle_close) + "\n前跌→當跌\n價格≥EMA20\n負背離",
color = color.purple, textcolor = color.white, style = label.style_label_down, size = size.small)

if short_condition_5
label.new(x = bar_index, y = high,
text = "看空5-轉勢做空\n開倉價: " + tostring(prev_candle_open) + "\n前漲→當跌\n價格≥EMA20\n負背離",
color = color.fuchsia, textcolor = color.white, style = label.style_label_down, size = size.small)

if long_condition_5
label.new(x = bar_index, y = low,
text = "條件5-反彈買進\n開倉價: " + tostring(close) + "\n前漲→當漲\n價格<EMA20\n負背離",
color = color.yellow, textcolor = color.black, style = label.style_label_up, size = size.small)

// 添加資訊面板顯示當前狀態
var info_table = table.new(position.top_right, 4, 11, bgcolor=color.white, border_width=1)

if barstate.islast
table.cell(info_table, 0, 0, "參數", text_color=color.black, bgcolor=color.gray)
table.cell(info_table, 1, 0, "數值", text_color=color.black, bgcolor=color.gray)
table.cell(info_table, 2, 0, "狀態", text_color=color.black, bgcolor=color.gray)
table.cell(info_table, 3, 0, "條件檢查", text_color=color.black, bgcolor=color.gray)

```
table.cell(info_table, 0, 1, "信號延遲", text_color=color.black)
table.cell(info_table, 1, 1, tostring(signal_delay) + " K線", text_color=color.black)
table.cell(info_table, 2, 1, "", text_color=color.black)
table.cell(info_table, 3, 1, "", text_color=color.black)

table.cell(info_table, 0, 2, "收盤確認", text_color=color.black)
table.cell(info_table, 1, 2, require_current_close_confirm ? "開啟" : "關閉", text_color=color.black)
table.cell(info_table, 2, 2, "", text_color=color.black)
table.cell(info_table, 3, 2, "", text_color=color.black)

table.cell(info_table, 0, 3, "當前K線", text_color=color.black)
table.cell(info_table, 1, 3, current_bullish_close ? "收漲" : current_bearish_close ? "收跌" : "平盤",
           text_color=current_bullish_close ? color.green : current_bearish_close ? color.red : color.black)
table.cell(info_table, 2, 3, "", text_color=color.black)
table.cell(info_table, 3, 3, "", text_color=color.black)

table.cell(info_table, 0, 4, "EMA狀態", text_color=color.black)
ema_status = ema20 > ema60 and ema60 > ema120 ? "多頭排列" :
             ema20 < ema60 and ema60 < ema120 ? "空頭排列" : "盤整"
table.cell(info_table, 1, 4, ema_status,
           text_color=ema_status == "多頭排列" ? color.green : ema_status == "空頭排列" ? color.red : color.orange)
table.cell(info_table, 2, 4, "", text_color=color.black)
table.cell(info_table, 3, 4, "", text_color=color.black)

table.cell(info_table, 0, 5, "MACD柱狀", text_color=color.black)
table.cell(info_table, 1, 5, tostring(deltamacd, "#.####"),
           text_color=deltamacd > 0 ? color.green : deltamacd < 0 ? color.red : color.gray)
table.cell(info_table, 2, 5, "", text_color=color.black)
table.cell(info_table, 3, 5, "", text_color=color.black)

table.cell(info_table, 0, 6, "正背離", text_color=color.black)
table.cell(info_table, 1, 6, historical_pos_reg_div ? "是" : "否",
           text_color=historical_pos_reg_div ? color.green : color.gray)
table.cell(info_table, 2, 6, pos_base_condition ? "符合" : "不符合",
           text_color=pos_base_condition ? color.green : color.gray)
table.cell(info_table, 3, 6, "", text_color=color.black)

table.cell(info_table, 0, 7, "負背離", text_color=color.black)
table.cell(info_table, 1, 7, historical_neg_reg_div ? "是" : "否",
           text_color=historical_neg_reg_div ? color.red : color.gray)
table.cell(info_table, 2, 7, neg_base_condition ? "符合" : "不符合",
           text_color=neg_base_condition ? color.red : color.gray)
table.cell(info_table, 3, 7, "", text_color=color.black)

table.cell(info_table, 0, 8, "ATR", text_color=color.black)
table.cell(info_table, 1, 8, tostring(atr_value, "#.##"), text_color=color.black)
table.cell(info_table, 2, 8, "", text_color=color.black)
table.cell(info_table, 3, 8, "", text_color=color.black)

// 新增EMA條件檢查
ema_120_60_diff_long = (ema120_delayed - ema60_delayed) * 0.75
ema_condition_met_long = ema_120_60_diff_long > atr_value_delayed
ema_60_120_diff_short = (ema60_delayed - ema120_delayed) * 0.75
ema_condition_met_short = ema_60_120_diff_short > atr_value_delayed

table.cell(info_table, 0, 9, "做多EMA條件", text_color=color.black)
table.cell(info_table, 1, 9, tostring(ema_120_60_diff_long, "#.##"), text_color=color.black)
table.cell(info_table, 2, 9, "vs ATR: " + tostring(atr_value_delayed, "#.##"), text_color=color.black)
table.cell(info_table, 3, 9, ema_condition_met_long ? "符合" : "不符合",
           text_color=ema_condition_met_long ? color.green : color.red)

// 新增做空EMA條件檢查行
table.cell(info_table, 0, 10, "做空EMA條件", text_color=color.black)
table.cell(info_table, 1, 10, tostring(ema_60_120_diff_short, "#.##"), text_color=color.black)
table.cell(info_table, 2, 10, "vs ATR: " + tostring(atr_value_delayed, "#.##"), text_color=color.black)
table.cell(info_table, 3, 10, ema_condition_met_short ? "符合" : "不符合",
           text_color=ema_condition_met_short ? color.green : color.red)

```